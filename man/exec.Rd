% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exec.R
\name{exec_wait}
\alias{exec_wait}
\alias{exec_background}
\title{Execute a program}
\usage{
exec_wait(cmd, args = NULL, stdout = cat, stderr = cat)

exec_background(cmd, args = NULL, stdout = cat, stderr = cat)
}
\arguments{
\item{cmd}{the command to run. Eiter a full path or the name of a program
which exists in the \code{PATH}.}

\item{args}{character vector of arguments to pass}

\item{stdout}{callback function to process \code{STDOUT} text, or a file path to
pipe \code{STDOUT} to, or \code{NULL} to silence.}

\item{stderr}{callback function to process \code{STDERR} text, or a file path to
pipe \code{STDERR} to, or \code{NULL} to silence.}
}
\description{
Flexible replacements for \link{system2} / \link{pipe} which can pipe \code{stdout} / \code{stderr}
output from the child process back to R via callback functions.
}
\details{
The \code{exec_wait} function runs a system command and waits for it to complete.
If the process completes (either with success or error) it returns the status
code, but an error is raised when the process is terminated by a SIGNAL.
The program can be interrupted by sending SIGINT (press ESC or CTRL+C) in
which case the process tree is properly terminated.

The \code{exec_background} function started the program and immediately returns the
PID of the child process. In this case the state of the child is unknown.
You should kill it manually with \link[tools:pskill]{tools::pskill}. This is useful for running
a server daemon or background process.
}
\seealso{
Base \link{system2} and \link{pipe} provide other methods for running a system
command with output.
}


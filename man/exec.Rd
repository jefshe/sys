% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exec.R
\name{exec}
\alias{exec}
\alias{exec_wait}
\alias{sys}
\alias{exec_background}
\alias{exec_internal}
\title{Running System Commands}
\usage{
exec_wait(cmd, args = NULL, std_out = stdout(), std_err = stderr())

exec_background(cmd, args = NULL, std_out = TRUE, std_err = TRUE)

exec_internal(cmd, args = NULL)
}
\arguments{
\item{cmd}{the command to run. Eiter a full path or the name of a program
which exists in the \code{PATH}.}

\item{args}{character vector of arguments to pass}

\item{std_out}{if and where to direct child process \code{STDOUT}. Must be one of
\code{TRUE}, \code{FALSE}, filename, connection object or callback function. See section
on \emph{Output Streams} below for details.}

\item{std_err}{if and where to direct child process \code{STDERR}. Must be one of
\code{TRUE}, \code{FALSE}, filename, connection object or callback function. See section
on \emph{Output Streams} below for details.}
}
\value{
\code{exec_background} returns a pid. \code{exec_wait} returns an exit code.
\code{exec_internal} returns a list with exit code, stdout and stderr strings.
}
\description{
Powerful replacements for \link{system2} with support for interruptions, background
tasks and fine grained control over \code{STDOUT} / \code{STDERR} output streams.
}
\details{
The \code{exec_wait} function runs a system command and waits for the child process
to exit. When the child process completes normally (either success or error) it
returns with the program exit code. Otherwise (if the child process gets aborted)
R raises an error. The R user can interrupt the program by sending SIGINT (press
ESC or CTRL+C) in which case the child process tree is properly terminated.
Output streams \code{STDOUT} and \code{STDERR} are piped back to the parent process and can
be sent to a connection or callback function. See the section on \emph{Output Streams}
below for details.

The \code{exec_background} function starts the program and immediately returns the
PID of the child process. Because this is non-blocking, \code{std_out} and \code{std_out}
can only be \code{TRUE}/\code{FALSE} or a file path. The state of the process is not
controlled by R but the child can be killed manually with \link[tools:pskill]{tools::pskill}. This
is useful for running a server daemon or background process.
}
\section{Output Streams}{


The \code{std_out} and \code{std_err} parameters are used to control how output streams
of the child are processed. Possible values for both foreground and background
processes are:
\itemize{
\item \code{TRUE}: print child output in R console
\item \code{FALSE}: suppress output stream
\item \emph{string}: name or path of file to redirect output
}

In addition the \code{exec_wait} function also supports the following \code{std_out} and \code{std_err}
types:
\itemize{
\item \emph{connection} a writeable R \link{connection} object such as \link{stdout} or \link{stderr}
\item \emph{function}: callback function with one argument accepting a string
}

When using \code{exec_background} with \code{std_out = TRUE} or \code{std_err = TRUE} on Windows,
separate threads are used to print output. This works in RStudio and RTerm but
not in RGui because the latter has a custom I/O mechanism. Directing output to a
file is usually the safest option.
}

\seealso{
Base \link{system2} and \link{pipe} provide other methods for running a system
command with output.
}
